// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
)

// AwsSubAccount represents a row from 'trackit.aws_sub_account'.
type AwsSubAccount struct {
	ID           int    `json:"id"`             // id
	AwsAccountID int    `json:"aws_account_id"` // aws_account_id
	AwsID        string `json:"aws_id"`         // aws_id
	Name         string `json:"name"`           // name

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsSubAccount exists in the database.
func (asa *AwsSubAccount) Exists() bool {
	return asa._exists
}

// Deleted provides information if the AwsSubAccount has been deleted from the database.
func (asa *AwsSubAccount) Deleted() bool {
	return asa._deleted
}

// Insert inserts the AwsSubAccount to the database.
func (asa *AwsSubAccount) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if asa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_sub_account (` +
		`aws_account_id, aws_id, name` +
		`) VALUES (` +
		`?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, asa.AwsAccountID, asa.AwsID, asa.Name)
	res, err := db.Exec(sqlstr, asa.AwsAccountID, asa.AwsID, asa.Name)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	asa.ID = int(id)
	asa._exists = true

	return nil
}

// Update updates the AwsSubAccount in the database.
func (asa *AwsSubAccount) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !asa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if asa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_sub_account SET ` +
		`aws_account_id = ?, aws_id = ?, name = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, asa.AwsAccountID, asa.AwsID, asa.Name, asa.ID)
	_, err = db.Exec(sqlstr, asa.AwsAccountID, asa.AwsID, asa.Name, asa.ID)
	return err
}

// Save saves the AwsSubAccount to the database.
func (asa *AwsSubAccount) Save(db XODB) error {
	if asa.Exists() {
		return asa.Update(db)
	}

	return asa.Insert(db)
}

// Delete deletes the AwsSubAccount from the database.
func (asa *AwsSubAccount) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !asa._exists {
		return nil
	}

	// if deleted, bail
	if asa._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_sub_account WHERE id = ?`

	// run query
	XOLog(sqlstr, asa.ID)
	_, err = db.Exec(sqlstr, asa.ID)
	if err != nil {
		return err
	}

	// set deleted
	asa._deleted = true

	return nil
}

// AwsAccount returns the AwsAccount associated with the AwsSubAccount's AwsAccountID (aws_account_id).
//
// Generated from foreign key 'aws_sub_account_ibfk_1'.
func (asa *AwsSubAccount) AwsAccount(db XODB) (*AwsAccount, error) {
	return AwsAccountByID(db, asa.AwsAccountID)
}

// AwsSubAccountByID retrieves a row from 'trackit.aws_sub_account' as a AwsSubAccount.
//
// Generated from index 'aws_sub_account_id_pkey'.
func AwsSubAccountByID(db XODB, id int) (*AwsSubAccount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, aws_id, name ` +
		`FROM trackit.aws_sub_account ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	asa := AwsSubAccount{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&asa.ID, &asa.AwsAccountID, &asa.AwsID, &asa.Name)
	if err != nil {
		return nil, err
	}

	return &asa, nil
}

// AwsSubAccountsByAwsAccountID retrieves a row from 'trackit.aws_sub_account' as a AwsSubAccount.
//
// Generated from index 'foreign_aws_account'.
func AwsSubAccountsByAwsAccountID(db XODB, awsAccountID int) ([]*AwsSubAccount, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, aws_id, name ` +
		`FROM trackit.aws_sub_account ` +
		`WHERE aws_account_id = ?`

	// run query
	XOLog(sqlstr, awsAccountID)
	q, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AwsSubAccount{}
	for q.Next() {
		asa := AwsSubAccount{
			_exists: true,
		}

		// scan
		err = q.Scan(&asa.ID, &asa.AwsAccountID, &asa.AwsID, &asa.Name)
		if err != nil {
			return nil, err
		}

		res = append(res, &asa)
	}

	return res, nil
}
