// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// EmailedAnomaly represents a row from 'trackit.emailed_anomaly'.
type EmailedAnomaly struct {
	ID           int       `json:"id"`             // id
	AwsAccountID int       `json:"aws_account_id"` // aws_account_id
	Product      string    `json:"product"`        // product
	Recipient    string    `json:"recipient"`      // recipient
	Date         time.Time `json:"date"`           // date

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the EmailedAnomaly exists in the database.
func (ea *EmailedAnomaly) Exists() bool {
	return ea._exists
}

// Deleted provides information if the EmailedAnomaly has been deleted from the database.
func (ea *EmailedAnomaly) Deleted() bool {
	return ea._deleted
}

// Insert inserts the EmailedAnomaly to the database.
func (ea *EmailedAnomaly) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if ea._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.emailed_anomaly (` +
		`aws_account_id, product, recipient, date` +
		`) VALUES (` +
		`?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date)
	res, err := db.Exec(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	ea.ID = int(id)
	ea._exists = true

	return nil
}

// Update updates the EmailedAnomaly in the database.
func (ea *EmailedAnomaly) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ea._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if ea._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.emailed_anomaly SET ` +
		`aws_account_id = ?, product = ?, recipient = ?, date = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date, ea.ID)
	_, err = db.Exec(sqlstr, ea.AwsAccountID, ea.Product, ea.Recipient, ea.Date, ea.ID)
	return err
}

// Save saves the EmailedAnomaly to the database.
func (ea *EmailedAnomaly) Save(db XODB) error {
	if ea.Exists() {
		return ea.Update(db)
	}

	return ea.Insert(db)
}

// Delete deletes the EmailedAnomaly from the database.
func (ea *EmailedAnomaly) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !ea._exists {
		return nil
	}

	// if deleted, bail
	if ea._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.emailed_anomaly WHERE id = ?`

	// run query
	XOLog(sqlstr, ea.ID)
	_, err = db.Exec(sqlstr, ea.ID)
	if err != nil {
		return err
	}

	// set deleted
	ea._deleted = true

	return nil
}

// AwsAccount returns the AwsAccount associated with the EmailedAnomaly's AwsAccountID (aws_account_id).
//
// Generated from foreign key 'emailed_anomaly_ibfk_1'.
func (ea *EmailedAnomaly) AwsAccount(db XODB) (*AwsAccount, error) {
	return AwsAccountByID(db, ea.AwsAccountID)
}

// EmailedAnomalyByID retrieves a row from 'trackit.emailed_anomaly' as a EmailedAnomaly.
//
// Generated from index 'emailed_anomaly_id_pkey'.
func EmailedAnomalyByID(db XODB, id int) (*EmailedAnomaly, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, product, recipient, date ` +
		`FROM trackit.emailed_anomaly ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	ea := EmailedAnomaly{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&ea.ID, &ea.AwsAccountID, &ea.Product, &ea.Recipient, &ea.Date)
	if err != nil {
		return nil, err
	}

	return &ea, nil
}

// EmailedAnomaliesByAwsAccountID retrieves a row from 'trackit.emailed_anomaly' as a EmailedAnomaly.
//
// Generated from index 'foreign_aws_account'.
func EmailedAnomaliesByAwsAccountID(db XODB, awsAccountID int) ([]*EmailedAnomaly, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, product, recipient, date ` +
		`FROM trackit.emailed_anomaly ` +
		`WHERE aws_account_id = ?`

	// run query
	XOLog(sqlstr, awsAccountID)
	q, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*EmailedAnomaly{}
	for q.Next() {
		ea := EmailedAnomaly{
			_exists: true,
		}

		// scan
		err = q.Scan(&ea.ID, &ea.AwsAccountID, &ea.Product, &ea.Recipient, &ea.Date)
		if err != nil {
			return nil, err
		}

		res = append(res, &ea)
	}

	return res, nil
}
