// Package models contains the types for schema 'trackit'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// AwsAccountReportsJob represents a row from 'trackit.aws_account_reports_job'.
type AwsAccountReportsJob struct {
	ID                          int       `json:"id"`                          // id
	AwsAccountID                int       `json:"aws_account_id"`              // aws_account_id
	Completed                   time.Time `json:"completed"`                   // completed
	WorkerID                    string    `json:"worker_id"`                   // worker_id
	Joberror                    string    `json:"jobError"`                    // jobError
	Spreadsheeterror            string    `json:"spreadsheetError"`            // spreadsheetError
	Costdifferror               string    `json:"costDiffError"`               // costDiffError
	Ec2usagereporterror         string    `json:"ec2UsageReportError"`         // ec2UsageReportError
	Rdsusagereporterror         string    `json:"rdsUsageReportError"`         // rdsUsageReportError
	Esusagereporterror          string    `json:"esUsageReportError"`          // esUsageReportError
	Elasticacheusagereporterror string    `json:"elasticacheUsageReportError"` // elasticacheUsageReportError
	Lambdausagereporterror      string    `json:"lambdaUsageReportError"`      // lambdaUsageReportError

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the AwsAccountReportsJob exists in the database.
func (aarj *AwsAccountReportsJob) Exists() bool {
	return aarj._exists
}

// Deleted provides information if the AwsAccountReportsJob has been deleted from the database.
func (aarj *AwsAccountReportsJob) Deleted() bool {
	return aarj._deleted
}

// Insert inserts the AwsAccountReportsJob to the database.
func (aarj *AwsAccountReportsJob) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if aarj._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO trackit.aws_account_reports_job (` +
		`aws_account_id, completed, worker_id, jobError, spreadsheetError, costDiffError, ec2UsageReportError, rdsUsageReportError, esUsageReportError, elasticacheUsageReportError, lambdaUsageReportError` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, aarj.AwsAccountID, aarj.Completed, aarj.WorkerID, aarj.Joberror, aarj.Spreadsheeterror, aarj.Costdifferror, aarj.Ec2usagereporterror, aarj.Rdsusagereporterror, aarj.Esusagereporterror, aarj.Elasticacheusagereporterror, aarj.Lambdausagereporterror)
	res, err := db.Exec(sqlstr, aarj.AwsAccountID, aarj.Completed, aarj.WorkerID, aarj.Joberror, aarj.Spreadsheeterror, aarj.Costdifferror, aarj.Ec2usagereporterror, aarj.Rdsusagereporterror, aarj.Esusagereporterror, aarj.Elasticacheusagereporterror, aarj.Lambdausagereporterror)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	aarj.ID = int(id)
	aarj._exists = true

	return nil
}

// Update updates the AwsAccountReportsJob in the database.
func (aarj *AwsAccountReportsJob) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aarj._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if aarj._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE trackit.aws_account_reports_job SET ` +
		`aws_account_id = ?, completed = ?, worker_id = ?, jobError = ?, spreadsheetError = ?, costDiffError = ?, ec2UsageReportError = ?, rdsUsageReportError = ?, esUsageReportError = ?, elasticacheUsageReportError = ?, lambdaUsageReportError = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, aarj.AwsAccountID, aarj.Completed, aarj.WorkerID, aarj.Joberror, aarj.Spreadsheeterror, aarj.Costdifferror, aarj.Ec2usagereporterror, aarj.Rdsusagereporterror, aarj.Esusagereporterror, aarj.Elasticacheusagereporterror, aarj.Lambdausagereporterror, aarj.ID)
	_, err = db.Exec(sqlstr, aarj.AwsAccountID, aarj.Completed, aarj.WorkerID, aarj.Joberror, aarj.Spreadsheeterror, aarj.Costdifferror, aarj.Ec2usagereporterror, aarj.Rdsusagereporterror, aarj.Esusagereporterror, aarj.Elasticacheusagereporterror, aarj.Lambdausagereporterror, aarj.ID)
	return err
}

// Save saves the AwsAccountReportsJob to the database.
func (aarj *AwsAccountReportsJob) Save(db XODB) error {
	if aarj.Exists() {
		return aarj.Update(db)
	}

	return aarj.Insert(db)
}

// Delete deletes the AwsAccountReportsJob from the database.
func (aarj *AwsAccountReportsJob) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !aarj._exists {
		return nil
	}

	// if deleted, bail
	if aarj._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM trackit.aws_account_reports_job WHERE id = ?`

	// run query
	XOLog(sqlstr, aarj.ID)
	_, err = db.Exec(sqlstr, aarj.ID)
	if err != nil {
		return err
	}

	// set deleted
	aarj._deleted = true

	return nil
}

// AwsAccount returns the AwsAccount associated with the AwsAccountReportsJob's AwsAccountID (aws_account_id).
//
// Generated from foreign key 'aws_account_reports_job_ibfk_1'.
func (aarj *AwsAccountReportsJob) AwsAccount(db XODB) (*AwsAccount, error) {
	return AwsAccountByID(db, aarj.AwsAccountID)
}

// AwsAccountReportsJobByID retrieves a row from 'trackit.aws_account_reports_job' as a AwsAccountReportsJob.
//
// Generated from index 'aws_account_reports_job_id_pkey'.
func AwsAccountReportsJobByID(db XODB, id int) (*AwsAccountReportsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError, spreadsheetError, costDiffError, ec2UsageReportError, rdsUsageReportError, esUsageReportError, elasticacheUsageReportError, lambdaUsageReportError ` +
		`FROM trackit.aws_account_reports_job ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	aarj := AwsAccountReportsJob{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, id).Scan(&aarj.ID, &aarj.AwsAccountID, &aarj.Completed, &aarj.WorkerID, &aarj.Joberror, &aarj.Spreadsheeterror, &aarj.Costdifferror, &aarj.Ec2usagereporterror, &aarj.Rdsusagereporterror, &aarj.Esusagereporterror, &aarj.Elasticacheusagereporterror, &aarj.Lambdausagereporterror)
	if err != nil {
		return nil, err
	}

	return &aarj, nil
}

// AwsAccountReportsJobsByAwsAccountID retrieves a row from 'trackit.aws_account_reports_job' as a AwsAccountReportsJob.
//
// Generated from index 'foreign_aws_account'.
func AwsAccountReportsJobsByAwsAccountID(db XODB, awsAccountID int) ([]*AwsAccountReportsJob, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, aws_account_id, completed, worker_id, jobError, spreadsheetError, costDiffError, ec2UsageReportError, rdsUsageReportError, esUsageReportError, elasticacheUsageReportError, lambdaUsageReportError ` +
		`FROM trackit.aws_account_reports_job ` +
		`WHERE aws_account_id = ?`

	// run query
	XOLog(sqlstr, awsAccountID)
	q, err := db.Query(sqlstr, awsAccountID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*AwsAccountReportsJob{}
	for q.Next() {
		aarj := AwsAccountReportsJob{
			_exists: true,
		}

		// scan
		err = q.Scan(&aarj.ID, &aarj.AwsAccountID, &aarj.Completed, &aarj.WorkerID, &aarj.Joberror, &aarj.Spreadsheeterror, &aarj.Costdifferror, &aarj.Ec2usagereporterror, &aarj.Rdsusagereporterror, &aarj.Esusagereporterror, &aarj.Elasticacheusagereporterror, &aarj.Lambdausagereporterror)
		if err != nil {
			return nil, err
		}

		res = append(res, &aarj)
	}

	return res, nil
}
